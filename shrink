#!/bin/bash


function saveHash() {
	local path="$1"
	local hash="$2"

	printf "%s\t%s\n" "$hash" "$path" >>"$TMP/hashes"
}

##
# git-like dir hashing - http://git-scm.com/book/fr/v2/Git-Internals-Git-Objects
#
function checksumDir() {
	local dir="$1"

	local filesize
	local name
	rm -f "$TMP/tree"
	find "$SRCDIR/$dir" -mindepth 1 -maxdepth 1 -printf '%s %P\n' | sort -k2 | while read filesize name; do
		local key="$dir/$name"
		local type="blob"
		local hash
		local mode
		if [ -d "$SRCDIR/$key" ]; then
			type="tree"
			key="$key/"
			mode="040000"
			# lookup the stored hash
			local regex=${key//\//\\/}
			regex=${regex//./\\.}
			hash=$(sed -n '/\t'"${regex}"'$/{s:\t.*$::;p;}' "$TMP/hashes")
		elif [ -L "$SRCDIR/$key" ]; then
			mode="120000"
			hash=L_$( find "$SRCDIR/$key" -printf 'blob %s\0%l' | sha1sum | sed 's:  .*$::' )
		elif [ -f "$SRCDIR/$key" ]; then
			mode="120000"
			[ -x "$SRCDIR/$key" ] && mode="100755"
			hash=F_$( (printf "blob ${filesize}\u0000"; cat "$SRCDIR/$key") | sha1sum | sed 's:  .*$::' )
		fi
		if [ -z "$hash" ]; then
			echo "ERROR: cannot find hash for $key !!!" | tee $TMP/stop >&2
			exit 1
		fi
		[ -d "$SRCDIR/$key" ] || saveHash "$key" "$hash"
		printf "%s %s %s\t%s\n" "$mode" "$type" "$hash" "$name" >>"$TMP/tree"
	done
	[ -s "$TMP/stop" ] && return 1
	saveHash "${dir}/" "D_$(sha1sum $TMP/tree | sed 's:  .*$::')"
	rm "$TMP/tree"
}

function shrink() {
	mkdir "$TMP" || return 1
	# compute all store hashes of all files
	# list all directories, in deepest-first order:
	find "$SRCDIR" -type d -printf '%d\t%P\n' | sort -r -nk1 | cut -f2 >"$TMP/dirsByDepth"
	# now compute checksums for all dirs
	sed '/^$/d' "$TMP/dirsByDepth" | while read dir; do
		case "$SRCDIR/$dir/" in
		"$TMP"/) continue;;
		*);;
		esac
		checksumDir "$dir" || return 1
	done

	# OK all hashes are computed, now let's find duplicates
	#TODO: needs to be optimized; tree duplicates must suppress contained blob duplicates
	rm -f "$TMP/unshrink"
	printf "0" >"$TMP/calcBytes"
	cut -f1 "$TMP/hashes" | sort | uniq -d | while read hash; do
		sed -n "/^$hash\t/{s:^.*\t::;p;}" "$TMP/hashes" > "$TMP/dup"
		local first=$(head -1 "$TMP/dup")
		local cnt=$(cat $TMP/dup | wc -l)
		local sz=$(stat --printf=%s "$SRCDIR/$first")
		printf " + $(( cnt - 1 )) * $sz" >> "$TMP/calcBytes"
		sed '1d;s:^:'"$first"'\t:' "$TMP/dup" >>"$TMP/unshrink"
		rm "$TMP/dup"
	done
	local shrinkFiles=$(cat $TMP/unshrink | wc -l)
	echo >> "$TMP/calcBytes"
	local shrinkBytes=$(cat $TMP/calcBytes | bc)
	echo "shrink: $shrinkFiles files, $shrinkBytes bytes"
}


SRCDIR=${1?'Please specify a directory to shrink'}

# TODO: we must enable changing TMP in order to support shrinking on read-only media
TMP=$SRCDIR/.shrink

rm -rf "$TMP" # TODO: only for debugging

shrink
